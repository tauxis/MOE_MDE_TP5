package Tauxis.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_DeclarationVariable;
  private ConceptPresentation props_Expression;
  private ConceptPresentation props_Instruction;
  private ConceptPresentation props_Programme;
  private ConceptPresentation props_RefVariable;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.DeclarationVariable:
        if (props_DeclarationVariable == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DeclarationVariable = cpb.create();
        }
        return props_DeclarationVariable;
      case LanguageConceptSwitch.Expression:
        if (props_Expression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Expression");
          props_Expression = cpb.create();
        }
        return props_Expression;
      case LanguageConceptSwitch.Instruction:
        if (props_Instruction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Instruction = cpb.create();
        }
        return props_Instruction;
      case LanguageConceptSwitch.Programme:
        if (props_Programme == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Programme = cpb.create();
        }
        return props_Programme;
      case LanguageConceptSwitch.RefVariable:
        if (props_RefVariable == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("RefVariable");
          props_RefVariable = cpb.create();
        }
        return props_RefVariable;
    }
    return null;
  }
}
