package Tauxis.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SConcept;

public class check_Programme_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_Programme_NonTypesystemRule() {
  }
  public void applyRule(final SNode programme, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    Set<String> identifiants = SetSequence.fromSet(new HashSet<String>());
    for (SNode variable : SNodeOperations.ofConcept(SLinkOperations.getChildren(programme, LINKS.instructions$qOPW), CONCEPTS.DeclarationVariable$vh)) {
      if (SetSequence.fromSet(identifiants).contains(SPropertyOperations.getString(variable, PROPS.name$MnvL))) {
        {
          final MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(variable, "identifiant deja defini : " + SPropertyOperations.getString(variable, PROPS.name$MnvL), "r:782c04d1-2bb8-47fe-990c-f6177092284f(Tauxis.typesystem)", "4622908081624004749", null, errorTarget);
        }
      }
      SetSequence.fromSet(identifiants).addElement(SPropertyOperations.getString(variable, PROPS.name$MnvL));
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.Programme$vK;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink instructions$qOPW = MetaAdapterFactory.getContainmentLink(0xf6cd233ef2b447e9L, 0x92ff415cf49c3252L, 0x1c58edc83fcf9267L, 0x1c58edc83fcf926cL, "instructions");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept DeclarationVariable$vh = MetaAdapterFactory.getConcept(0xf6cd233ef2b447e9L, 0x92ff415cf49c3252L, 0x1c58edc83fcf9266L, "Tauxis.structure.DeclarationVariable");
    /*package*/ static final SConcept Programme$vK = MetaAdapterFactory.getConcept(0xf6cd233ef2b447e9L, 0x92ff415cf49c3252L, 0x1c58edc83fcf9267L, "Tauxis.structure.Programme");
  }
}
