package Tauxis.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.typesystem.inference.EquationInfo;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;

public class typeof_OperationBinaire_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_OperationBinaire_InferenceRule() {
  }
  public void applyRule(final SNode operationBinaire, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    {
      SNode _nodeToCheck_1029348928467 = operationBinaire;
      EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:782c04d1-2bb8-47fe-990c-f6177092284f(Tauxis.typesystem)", "4622908081624060589", 0, null);
      typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:782c04d1-2bb8-47fe-990c-f6177092284f(Tauxis.typesystem)", "4622908081624060097", true), (SNode) typeCheckingContext.typeOf(SLinkOperations.getTarget(operationBinaire, LINKS.gauche$pZDs), "r:782c04d1-2bb8-47fe-990c-f6177092284f(Tauxis.typesystem)", "4622908081624060605", true), _info_12389875345);
    }
    if (!(typeCheckingContext.isSingleTypeComputation())) {
      {
        SNode _nodeToCheck_1029348928467 = operationBinaire;
        EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:782c04d1-2bb8-47fe-990c-f6177092284f(Tauxis.typesystem)", "4622908081624062175", 0, null);
        typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(SLinkOperations.getTarget(operationBinaire, LINKS.gauche$pZDs), "r:782c04d1-2bb8-47fe-990c-f6177092284f(Tauxis.typesystem)", "4622908081624061891", true), (SNode) typeCheckingContext.typeOf(SLinkOperations.getTarget(operationBinaire, LINKS.droite$q13y), "r:782c04d1-2bb8-47fe-990c-f6177092284f(Tauxis.typesystem)", "4622908081624062204", true), true, _info_12389875345);
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.OperationBinaire$VF;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink gauche$pZDs = MetaAdapterFactory.getContainmentLink(0xf6cd233ef2b447e9L, 0x92ff415cf49c3252L, 0x1c58edc83fd033baL, 0x1c58edc83fd1cf79L, "gauche");
    /*package*/ static final SContainmentLink droite$q13y = MetaAdapterFactory.getContainmentLink(0xf6cd233ef2b447e9L, 0x92ff415cf49c3252L, 0x1c58edc83fd033baL, 0x1c58edc83fd1cf7fL, "droite");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept OperationBinaire$VF = MetaAdapterFactory.getConcept(0xf6cd233ef2b447e9L, 0x92ff415cf49c3252L, 0x1c58edc83fd033baL, "Tauxis.structure.OperationBinaire");
  }
}
